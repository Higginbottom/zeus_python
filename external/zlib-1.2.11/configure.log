--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:00:50 GMT
Checking for gcc...
=== ztest33983.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest33983.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest33983.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest33983.c

Checking for shared library support...
=== ztest33983.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest33983.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest33983.dylib ztest33983.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest33983.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest33983.c
Checking for size_t... Yes.


=== ztest33983.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33983.c
ztest33983.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest33983.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest33983 ztest33983.c
Checking for fseeko... Yes.

=== ztest33983.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest33983 ztest33983.c
Checking for strerror... Yes.

=== ztest33983.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest33983.c
Checking for unistd.h... Yes.

=== ztest33983.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest33983.c
Checking for stdarg.h... Yes.

=== ztest33983.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest33983.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest33983.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest33983 ztest33983.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest33983.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest33983.c
Checking for return value of vsnprintf()... Yes.

=== ztest33983.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest33983.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --disable-shared --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:26:46 GMT
unknown option: --disable-shared
./configure --help for help
** ./configure aborting.
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:27:05 GMT
Checking for gcc...
=== ztest47981.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest47981.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest47981.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest47981.c

Checking for shared library support...
=== ztest47981.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest47981.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest47981.dylib ztest47981.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest47981.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest47981.c
Checking for size_t... Yes.


=== ztest47981.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest47981.c
ztest47981.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest47981.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest47981 ztest47981.c
Checking for fseeko... Yes.

=== ztest47981.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest47981 ztest47981.c
Checking for strerror... Yes.

=== ztest47981.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest47981.c
Checking for unistd.h... Yes.

=== ztest47981.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest47981.c
Checking for stdarg.h... Yes.

=== ztest47981.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest47981.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest47981.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest47981 ztest47981.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest47981.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest47981.c
Checking for return value of vsnprintf()... Yes.

=== ztest47981.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest47981.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:28:18 GMT
Checking for gcc...
=== ztest48310.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest48310.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest48310.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest48310.c

Checking for shared library support...
=== ztest48310.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest48310.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest48310.dylib ztest48310.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest48310.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest48310.c
Checking for size_t... Yes.


=== ztest48310.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest48310.c
ztest48310.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest48310.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest48310 ztest48310.c
Checking for fseeko... Yes.

=== ztest48310.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest48310 ztest48310.c
Checking for strerror... Yes.

=== ztest48310.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest48310.c
Checking for unistd.h... Yes.

=== ztest48310.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest48310.c
Checking for stdarg.h... Yes.

=== ztest48310.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest48310.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest48310.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest48310 ztest48310.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest48310.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest48310.c
Checking for return value of vsnprintf()... Yes.

=== ztest48310.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest48310.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:30:18 GMT
Checking for gcc...
=== ztest48641.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest48641.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest48641.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest48641.c

Checking for shared library support...
=== ztest48641.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest48641.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest48641.dylib ztest48641.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest48641.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest48641.c
Checking for size_t... Yes.


=== ztest48641.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest48641.c
ztest48641.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest48641.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest48641 ztest48641.c
Checking for fseeko... Yes.

=== ztest48641.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest48641 ztest48641.c
Checking for strerror... Yes.

=== ztest48641.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest48641.c
Checking for unistd.h... Yes.

=== ztest48641.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest48641.c
Checking for stdarg.h... Yes.

=== ztest48641.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest48641.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest48641.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest48641 ztest48641.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest48641.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest48641.c
Checking for return value of vsnprintf()... Yes.

=== ztest48641.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest48641.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:35:42 GMT
Checking for gcc...
=== ztest50904.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest50904.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest50904.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest50904.c

Checking for shared library support...
=== ztest50904.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest50904.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest50904.dylib ztest50904.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest50904.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest50904.c
Checking for size_t... Yes.


=== ztest50904.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest50904.c
ztest50904.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest50904.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest50904 ztest50904.c
Checking for fseeko... Yes.

=== ztest50904.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest50904 ztest50904.c
Checking for strerror... Yes.

=== ztest50904.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest50904.c
Checking for unistd.h... Yes.

=== ztest50904.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest50904.c
Checking for stdarg.h... Yes.

=== ztest50904.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest50904.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest50904.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest50904 ztest50904.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest50904.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest50904.c
Checking for return value of vsnprintf()... Yes.

=== ztest50904.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest50904.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:40:09 GMT
Checking for gcc...
=== ztest64684.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest64684.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest64684.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest64684.c

Checking for shared library support...
=== ztest64684.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest64684.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest64684.dylib ztest64684.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest64684.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest64684.c
Checking for size_t... Yes.


=== ztest64684.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest64684.c
ztest64684.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest64684.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest64684 ztest64684.c
Checking for fseeko... Yes.

=== ztest64684.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest64684 ztest64684.c
Checking for strerror... Yes.

=== ztest64684.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest64684.c
Checking for unistd.h... Yes.

=== ztest64684.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest64684.c
Checking for stdarg.h... Yes.

=== ztest64684.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest64684.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest64684.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest64684 ztest64684.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest64684.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest64684.c
Checking for return value of vsnprintf()... Yes.

=== ztest64684.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest64684.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:43:01 GMT
Checking for gcc...
=== ztest78389.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest78389.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest78389.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest78389.c

Checking for shared library support...
=== ztest78389.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest78389.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest78389.dylib ztest78389.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest78389.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest78389.c
Checking for size_t... Yes.


=== ztest78389.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest78389.c
ztest78389.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest78389.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest78389 ztest78389.c
Checking for fseeko... Yes.

=== ztest78389.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest78389 ztest78389.c
Checking for strerror... Yes.

=== ztest78389.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest78389.c
Checking for unistd.h... Yes.

=== ztest78389.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest78389.c
Checking for stdarg.h... Yes.

=== ztest78389.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest78389.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest78389.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest78389 ztest78389.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest78389.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest78389.c
Checking for return value of vsnprintf()... Yes.

=== ztest78389.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest78389.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:49:27 GMT
Checking for gcc...
=== ztest93398.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest93398.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest93398.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest93398.c

Checking for shared library support...
=== ztest93398.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest93398.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest93398.dylib ztest93398.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest93398.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest93398.c
Checking for size_t... Yes.


=== ztest93398.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest93398.c
ztest93398.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest93398.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest93398 ztest93398.c
Checking for fseeko... Yes.

=== ztest93398.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest93398 ztest93398.c
Checking for strerror... Yes.

=== ztest93398.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest93398.c
Checking for unistd.h... Yes.

=== ztest93398.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest93398.c
Checking for stdarg.h... Yes.

=== ztest93398.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest93398.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest93398.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest93398 ztest93398.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest93398.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest93398.c
Checking for return value of vsnprintf()... Yes.

=== ztest93398.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest93398.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 12:58:18 GMT
Checking for gcc...
=== ztest10941.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest10941.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest10941.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest10941.c

Checking for shared library support...
=== ztest10941.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest10941.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest10941.dylib ztest10941.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest10941.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest10941.c
Checking for size_t... Yes.


=== ztest10941.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest10941.c
ztest10941.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest10941.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest10941 ztest10941.c
Checking for fseeko... Yes.

=== ztest10941.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest10941 ztest10941.c
Checking for strerror... Yes.

=== ztest10941.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest10941.c
Checking for unistd.h... Yes.

=== ztest10941.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest10941.c
Checking for stdarg.h... Yes.

=== ztest10941.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest10941.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest10941.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest10941 ztest10941.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest10941.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest10941.c
Checking for return value of vsnprintf()... Yes.

=== ztest10941.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest10941.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nickhigginbottom/zeus_python/lib/zlib
Tue  7 Nov 2017 13:02:26 GMT
Checking for gcc...
=== ztest27904.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest27904.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest27904.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest27904.c

Checking for shared library support...
=== ztest27904.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest27904.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest27904.dylib ztest27904.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest27904.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest27904.c
Checking for size_t... Yes.


=== ztest27904.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest27904.c
ztest27904.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest27904.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest27904 ztest27904.c
Checking for fseeko... Yes.

=== ztest27904.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest27904 ztest27904.c
Checking for strerror... Yes.

=== ztest27904.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest27904.c
Checking for unistd.h... Yes.

=== ztest27904.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest27904.c
Checking for stdarg.h... Yes.

=== ztest27904.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest27904.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest27904.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest27904 ztest27904.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest27904.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest27904.c
Checking for return value of vsnprintf()... Yes.

=== ztest27904.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest27904.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nickhigginbottom/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


--------------------
./configure --prefix=/Users/nsh2m14/zeus_python/lib/zlib
Thu  9 Nov 2017 11:40:04 GMT
Checking for gcc...
=== ztest4872.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest4872.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4872.c ===
int foo() { return 0; }
===
gcc -c -O3 ztest4872.c

Checking for shared library support...
=== ztest4872.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -w -c -O3 -fPIC ztest4872.c
gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O3 -fPIC -o ztest4872.dylib ztest4872.o
Building shared library libz.1.2.11.dylib with gcc.

=== ztest4872.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
gcc -c -O3 ztest4872.c
Checking for size_t... Yes.


=== ztest4872.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
gcc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4872.c
ztest4872.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest4872.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
gcc -O3 -o ztest4872 ztest4872.c
Checking for fseeko... Yes.

=== ztest4872.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
gcc -O3 -o ztest4872 ztest4872.c
Checking for strerror... Yes.

=== ztest4872.c ===
#include <unistd.h>
int main() { return 0; }
===
gcc -c -O3 ztest4872.c
Checking for unistd.h... Yes.

=== ztest4872.c ===
#include <stdarg.h>
int main() { return 0; }
===
gcc -c -O3 ztest4872.c
Checking for stdarg.h... Yes.

=== ztest4872.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
gcc -c -O3 ztest4872.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4872.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -O3 -o ztest4872 ztest4872.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4872.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
gcc -c -O3 ztest4872.c
Checking for return value of vsnprintf()... Yes.

=== ztest4872.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
gcc -c -O3 ztest4872.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = gcc
CFLAGS = -O3 -DHAVE_HIDDEN
CPP = gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = gcc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /Users/nsh2m14/zeus_python/lib/zlib
sharedlibdir = ${libdir}
uname = Darwin
--------------------


