#include "zeus2d.def"

	subroutine hc_sub(rho,xi0,e_0,e_1,i,j)
	  	use interpolation
		
       implicit NONE

#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "gravity.h"
#include "zeus_python.h"
#include "root.h"
#include "diskw.h"
        REAL    xi0,temp,hc_tot,rho,rho1,xi1,hc_tot1,e_0,e_1
	REAL    t_0,t_1,hc_01
	REAL 	e_01,t_01,sqsqxi1
	INTEGER i1,j1,i,j,hc_mode,xi_ind,code
	double precision t_l,t_u,tol,nh1,ne1,tfloor
	REAL heatcool,zbrent,zfunc,n1,ne_rat
	REAL test,hc_test
	common /hc_data/ xi1,e_01,hc_01,sqsqxi1,n1,i1,j1,nh1,ne1
	external zfunc
	
	
c   first calculate the current temperature of the cell	
	if (xi0.lt.1e-20) then
		t_1=1e4
	else
		t_01=e_0*(2.0/3.0)/((rho/(mu*mp))*boltz)
	
	xi1=xi0
	i1=i
	j1=j
	e_01=e_0
	
c   compute xi to the quarter power, this is used a lot and doing this now saves time	
	sqsqxi1=sqrt(sqrt(xi0))

c   n1 is the particle density (including electrons)
	n1=rho/(mu*mp)
c   nh1 is the hydrogen density (based upon solar abundances)	
	nh1=rho/(1.43*mp)
c   ne1 is the electron density 
	ne1=nh1*1.21

c stage one, bracket to find out where the zero point is

c the ionization parameter doesnt change so we only need
c to bracket it once. We also set the correct mode here.
	  
	
c we use the heating rate at the   originaltemperature a lot,
c lets compute it first		

	hc_01=heatcool(t_01)

c   the next few lines bracket the solution temperature
	t_l=t_01*0.9
	t_u=t_01*1.1	
c	print *,"Bracketing temp=",t_01,i,j,rho,e_0
	test=zfunc(t_l)*zfunc(t_u)
	tol=1.0
	
	 do while (test > 0)
		t_l=t_l*0.9
		t_u=t_u*1.1
    	test=zfunc(t_l)*zfunc(t_u)
	end do


c now we have worked out a bracket, find the correct value of new temperature
c we search for the zero point of the equation e_old - e_old - dt(de(t(1/2)))	
c	print *,"XXXXXX calling zbrent",i,j,xi1,xi_ind,t_l,t_u,
c     + zfunc(t_l),zfunc(t_u)
	code=1
	     t_1=zbrent(zfunc,t_l,t_u,tol,code,i,j)
		 
		 if (code==0) then
 			print *,"Failure in zbrent for cell ",i,j,"xi=",xi1,
     + " t_l=",t_l," t_old=",t_01," t_u=",t_u," dens=",rho,"e_0=",e_0
	 print *,"Setting temperature to old temperature"
	 t_1=t_01
		endif

c we will call heatcool one last time to compute the heating and cooling rates for the new temperature	
	

		 
       tfloor=((3.0*ptmass*mdot*guniv)/  (8.0*pi*sb*
     &   (x1b(i)*sin(x2b(j)))**3.0) )**0.25
	  

	hc_01=heatcool(t_1)



c now we have a new temperature, we will return the new internal energy. 
	e_1=t_1*1.5*n1*boltz
	endif


	end



      double precision function heatcool(temp)
  	use interpolation
	  
      implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "zeus_python.h"
#include "root.h"
#include "diskw.h"
      integer i,j,mode
c	  REAL interpolate
      REAL    div1,div2,divv,del,pnew,pav,xi0,temp,hc_tot,rho,e_0,t_0
      REAL    gamma_comp,gamma_x,l_b,l_l,hc_0,sqsqxi,st,n,nh,ne,delta
	  REAL     lxi,lt,heat,cool,ne_rat
	  integer   i_ind,j_ind
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j,nh,ne

      ne=nh*1.21
	
	st=sqrt(temp)
	
	h_comp(i,j)=comp_h_pre(i,j)*8.9e-36*xi0*tx
	c_comp(i,j)=comp_c_pre(i,j)*8.9e-36*xi0*(4.0*temp)
	
	h_xray(i,j)=xray_pre(i,j)*1.5e-21*(sqsqxi/st)*(1-(temp/tx))
	
	l_l=line_pre(i,j)*(1.7e-18*exp(-1.3e5/temp)/(xi0*st)+1e-24)


	
	
	

	
	l_b=brem_pre(i,j)*3.3e-27*st
	
	
	gamma_comp=h_comp(i,j)-c_comp(i,j)
	gamma_x=h_xray(i,j)
	c_brem(i,j)=l_b
	c_line(i,j)=l_l
	
	
	hc_tot=(gamma_comp*ne+gamma_x*nh-l_b*ne-l_l*ne)*nh
	
	heat_tot(i,j)=(h_comp(i,j)*ne+h_xray(i,j)*ne)*nh
	cool_tot(i,j)=(c_line(i,j)-c_brem(i,j)-c_comp(i,j))*ne*nh
	
	
	heatcool=hc_tot

	
	

	
	
	net_hc(i,j)=heatcool

	end function



	double precision function zfunc(temp) 
	implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "zeus_python.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
	REAL rho,xi0,e_0,t_0,temp,heatcool,hc_0,logxi,sqsqxi,n,nh,ne
	INTEGER i,j,mode,j_ind
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j,nh,ne
	external heatcool
	zfunc=(1.5*temp*n*boltz)-e_0-
     &  dt*(hc_0+heatcool(temp))/2.0
	end function



	  
	  subroutine hc_file_input()
              
              implicit none
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
#include "zeus_python.h"
#include "control.h"
		  integer i,j,ir,jt,j_ind,n
		  
		  
		  LOGICAL THERE 
   
		  REAL r,theta,c_heat,x_heat,b_heat,l_heat,c_cool,x_cool,py_xi
          REAL b_cool,l_cool,n1,py_temp,py_ne,py_vol
		  REAL ne,nh
		  REAL comp_c_old,comp_h_old,xray_old,line_old,brem_old
      REAL comp_c_pre_old,comp_h_pre_old,xray_pre_old,line_pre_old,
     +     brem_pre_old,ratio,py_rho,py_nh
	 integer pre_limit,pre_limit_tmp,mode
	 REAL heatcool,junk,n2,ne_rat
	 REAL xi0,e_0,hc_0,sqsqxi
 	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n2,ir,jt,nh,ne
	 
	 
	 pre_limit_tmp=0
	 pre_limit=0

        if (hc_lim.gt.0.0) then
			print *,"We are not limiting prefector changes"
			endif
	 

         INQUIRE( FILE='py_heatcool.dat', EXIST=THERE ) 
          IF ( THERE ) then
		 	 open(66,file='py_heatcool.dat',status='old')
	  	   	read (66,*,end=20)
   		  	 do 10, n=1,10000000
 
		  	   	read (66,*,end=20) i,j,r,theta,py_vol,py_temp,py_xi,py_ne,
     &			x_heat,c_heat,l_heat,
     &   b_heat,c_cool,l_cool,b_cool,py_rho,py_nh
	 
	 
	 c_heat=c_heat/py_nh/py_ne
	 c_cool=c_cool/py_nh/py_ne
	 x_heat=x_heat/py_nh/py_nh
	 l_cool=l_cool/py_nh/py_ne
	 b_cool=b_cool/py_nh/py_ne
	 
	 
	 
	 
	 
	 
	 ir=i+is 
	 jt=j+js
	 
	 if (abs((d(ir,jt)-py_rho)/py_rho) .gt. 1e-5) then
		 print *,"ALARM mismatch between zeus and python file",i,j,
     +d(ir,jt),py_rho,abs((d(ir,jt)-py_rho)/py_rho)
	endif
   
				
	n1=d(ir,jt)/(mu*mp)
	nh=d(ir,jt)/(1.43*mp)
	ne=nh*1.21
	
	ne=nh*ne_rat(py_temp,xi0)
				

	comp_c_pre_old=comp_c_pre(ir,jt) 
	comp_h_pre_old=comp_h_pre(ir,jt)
	xray_pre_old=xray_pre(ir,jt)
	line_pre_old=line_pre(ir,jt)
	brem_pre_old=brem_pre(ir,jt)   
	
	comp_c_old=c_comp(ir,jt) 
	comp_h_old=h_comp(ir,jt)
	xray_old=h_xray(ir,jt)
	line_old=c_line(ir,jt)
	brem_old=c_brem(ir,jt)
      
		

		xi0=xi(ir,jt)
		sqsqxi=sqrt(sqrt(xi0))
            

	   
         junk=heatcool(py_temp)  
		 


                        
                        
                         
		 comp_h_pre(ir,jt)=comp_h_pre(ir,jt)*(c_heat)/
     &   ((h_comp(ir,jt))+1d-99)
		 comp_c_pre(ir,jt)=comp_c_pre(ir,jt)*(c_cool)/
     &   ((c_comp(ir,jt))+1d-99)
		 xray_pre(ir,jt)=xray_pre(ir,jt)*x_heat/
     &   ((h_xray(ir,jt))+1d-99)
 		 line_pre(ir,jt)=line_pre(ir,jt)*l_cool/
     &   ((c_line(ir,jt))+1d-99)
 		 brem_pre(ir,jt)=brem_pre(ir,jt)*b_cool/
     &   ((c_brem(ir,jt))+1d-99)
	 

	 	 
        if (hc_lim.gt.0.0) then
        ratio=hc_lim
	  
	  

      if (comp_h_pre(ir,jt)/comp_h_pre_old .lt. ratio) then
           comp_h_pre(ir,jt)=comp_h_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
      endif

      if (comp_c_pre(ir,jt)/comp_c_pre_old .lt. ratio) then		  
           comp_c_pre(ir,jt)=comp_c_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1		   
      endif

      if (xray_pre(ir,jt)/xray_pre_old .lt. ratio) then		  
           xray_pre(ir,jt)=xray_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1		   
      endif
      if (line_pre(ir,jt)/line_pre_old .lt. ratio) then		  
            line_pre(ir,jt)=line_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1			
      endif

      if (brem_pre(ir,jt)/brem_pre_old .lt. ratio) then		  
            brem_pre(ir,jt)=brem_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1			
      endif
      
      
      ratio=1.0/hc_lim
     
      if (comp_h_pre(ir,jt)/comp_h_pre_old .gt. ratio) then
           comp_h_pre(ir,jt)=comp_h_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1   
      endif
	  
      if (comp_c_pre(ir,jt)/comp_c_pre_old .gt. ratio) then
           comp_c_pre(ir,jt)=comp_c_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1		   
      endif
	  
      if (xray_pre(ir,jt)/xray_pre_old .gt. ratio) then
		   xray_pre(ir,jt)=xray_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1		   
      endif
	  
      if (line_pre(ir,jt)/line_pre_old .gt. ratio) then		  
           line_pre(ir,jt)=line_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1			
      endif
	  
      if (brem_pre(ir,jt)/brem_pre_old .gt. ratio) then
            brem_pre(ir,jt)=brem_pre_old*ratio		
			   pre_limit_tmp=pre_limit_tmp+1
      endif
	  
c - call heatcool again to update the heating and cooling rates
	  

	  
	  endif
	  
      junk=heatcool(py_temp)  
     

		if (pre_limit_tmp .gt. 0) then
			pre_limit=pre_limit+1
			pre_limit_tmp=0
		endif
10		continue
		
20		print *,"There are ",n," records"	
		print *,pre_limit," cells had HC prefactor change limited"
		
		  close (unit=66)
	  else
		  print *,"There is no heatcool file - continuuing normally"
	  endif
		  
		  
		  RETURN
	  END
	  
	  
	  
	double precision function ne_rat(temp,xi)
	implicit NONE
	REAL temp,xi,x1,x2

	x1=10**(-51.59417133+12.27740153*log10(temp))
	x2=10**(-3.80749689+0.86092628*log10(temp))
	
	ne_rat=min(x1,x2,1.21)
	
	end function ne_rat
	
	
	 




